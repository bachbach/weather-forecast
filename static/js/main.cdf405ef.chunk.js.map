{"version":3,"sources":["services/StorageService.js","services/AppRegistry.js","services/APIInterceptor.js","ducks/forecasts.js","services/ForecastsService.js","ducks/index.js","services/ReduxStoreConfigurator.js","screens/Forecasts/Forecasts.js","connectors/ForecastsConnector.js","Router.js","AppLayout.js","registerServiceWorker.js","index.js"],"names":["StorageService","storageInterface","Lockr","_storageInterface","this","key","defaultValue","get","value","set","rm","flush","prefix","registry","registryProxy","Proxy","add","storage","entryName","entryClass","self","baseURL","process","console","log","settings","api","axios","create","url","mergeConfig","payload","post","config","appRegistry","Object","assign","headers","Accept","forecastsService","APIInterceptor","actions","GET_FORECASTS_SUCCESS","Symbol","GET_FORECASTS_ERROR","getForecastsSuccess","forecasts","type","initState","entries","appReducer","combineReducers","state","action","rootReducer","middlewares","thunkMiddleware","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","Forecasts","props","useEffect","getForecasts","map","forecast","dt_txt","connect","dispatch","a","query","data","list","error","response","storeConfigurator","configureStore","history","createBrowserHistory","Router","exact","path","component","ForecastsConnector","Component","AppLayout","className","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cdf405ef.chunk.js","sourcesContent":["import Lockr from 'lockr'\n\nclass StorageService {\n  _storageInterface = {}\n\n  constructor (storageInterface = Lockr) {\n    this._storageInterface = storageInterface\n  }\n\n  get prefix () {\n    return this._storageInterface.prefix\n  }\n\n  set prefix (prefix) {\n    this._storageInterface.prefix = prefix\n  }\n\n  get (key, defaultValue = null) {\n    return this._storageInterface.get(key, defaultValue)\n  }\n\n  set (key, value) {\n    return this._storageInterface.set(key, value)\n  }\n\n  rm (key) {\n    this._storageInterface.rm(key)\n  }\n\n  flush () {\n    this._storageInterface.flush()\n  }\n}\n\nexport { StorageService }\nexport default new StorageService()\n","import { StorageService } from './StorageService'\n\nconst registry = {}\n\nclass AppRegistry {\n  constructor () {\n    const registryProxy = new Proxy(this, this)\n\n    this.add('storage', new StorageService())\n    registry.storage.prefix = 'movies-'\n\n    return registryProxy\n  }\n\n  add (entryName, entryClass) {\n    registry[entryName] = entryClass\n  }\n\n  get (self, entryName) {\n    return self[entryName] || registry[entryName]\n  }\n}\n\nexport default new AppRegistry()\n","import axios from 'axios'\n// import mitt from 'mitt'\nimport appRegistry from './AppRegistry'\n\nclass APIInterceptor {\n  constructor (baseURL = `${process.env.REACT_APP_API_URL}/${process.env.REACT_APP_API_VERSION}`) {\n    console.log(process.env)\n    this.baseURL = baseURL\n\n    const settings = {\n      baseURL: this.baseURL\n    }\n\n    this.api = axios.create(settings)\n  }\n\n\n  get (url) {\n    return this.api.get(url, this.mergeConfig())\n  }\n\n  post (url, payload) {\n    return this.api.post(url, payload, this.mergeConfig())\n  }\n\n  mergeConfig (config = {}) {\n    const token = appRegistry.storage.get('token')\n\n    return Object.assign({}, config, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        ...config.headers\n      }\n    })\n  }\n}\n\nexport { APIInterceptor }\nexport default new APIInterceptor()\n","import ForecastsService from 'services/ForecastsService'\r\nimport { transformById } from 'helpers/redux'\r\n\r\nconst forecastsService = new ForecastsService()\r\n\r\nexport const actions = {\r\n  GET_FORECASTS_SUCCESS: Symbol('GET_FORECASTS_SUCCESS'),\r\n  GET_FORECASTS_ERROR: Symbol('GET_FORECASTS_ERROR')\r\n}\r\n\r\nconst getForecastsSuccess = (forecasts) => ({ type: actions.GET_FORECASTS_SUCCESS, forecasts })\r\nconst getForecastsError = (error) => ({ type: actions.GET_FORECASTS_ERROR, error })\r\n\r\nexport const getForecasts = (query) => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await forecastsService.getForecasts(query)\r\n      dispatch(getForecastsSuccess(data.list))\r\n      return data\r\n    } catch (e) {\r\n      return dispatch(getForecastsError(e.response.data))\r\n    }\r\n  }\r\n}\r\n\r\nconst initState = {\r\n  entries: []\r\n}\r\n\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case actions.GET_FORECASTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        // entries: transformById(action.forecasts)\r\n        entries: action.forecasts\r\n      }\r\n    default: \r\n      return state\r\n  }\r\n}","import APIInterceptor from './APIInterceptor'\r\n\r\nexport default class ForecastsService {\r\n  constructor (api = APIInterceptor) {\r\n    this.api = api\r\n  }\r\n\r\n  getForecasts(query = 'id=524901') {\r\n    // return this.api.get(`/forecast?${query}`)\r\n    return this.api.get('/forecast?id=524901&appid=c7d9c985558627e1717792be2372eaa4')\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\nimport forecasts from './forecasts'\n\nconst appReducer = combineReducers({\n  forecasts\n})\n\nconst rootReducer = (state, action) => {\n  return appReducer(state, action)\n}\n\nexport default rootReducer\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport rootReducer from 'ducks/index'\n\nclass ReduxStoreConfigurator {\n  constructor () {\n    this.middlewares = [thunkMiddleware]\n  }\n\n  configureStore (initialState) {\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    this.store = createStore(\n      rootReducer,\n      /* preloadedState, */\n      composeEnhancers(\n        applyMiddleware(...this.middlewares)\n      ),\n      initialState\n    );\n\n    return this.store\n  }\n}\n\nexport default new ReduxStoreConfigurator()\n","import React, { useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Forecasts = props => {\r\n  useEffect(() => {\r\n    props.getForecasts()\r\n  }, [])\r\n\r\n  const getForecasts = () => {\r\n    return props.forecasts.map(forecast => (\r\n      <div>\r\n        <span>{forecast.dt_txt}</span>\r\n      </div>\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Hello from Forecasts!</h1>\r\n      <div>\r\n        <div>{getForecasts()}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nForecasts.propTypes = {\r\n  forecasts: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Forecasts","import { connect } from 'react-redux'\r\nimport { getForecasts } from 'ducks/forecasts'\r\nimport { Forecasts } from 'screens/Forecasts'\r\n\r\nconst mapStateToProps = state => ({\r\n  forecasts: state.forecasts.entries\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getForecasts: () => dispatch(getForecasts())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Forecasts)\r\n","import React, { Component } from 'react'\nimport { Router as BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport createBrowserHistory from 'history/createBrowserHistory'\nimport storeConfigurator from 'services/ReduxStoreConfigurator'\nimport ForecastsConnector from 'connectors/ForecastsConnector'\n\nconst store = storeConfigurator.configureStore()\n\nconst history = createBrowserHistory()\n\nclass Router extends Component {\n  \n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter history={history}>\n          <Switch>\n            <Route exact path='/' component={ForecastsConnector} />\n          </Switch>\n        </BrowserRouter>\n      </Provider>\n    )\n  }\n}\n\nexport default Router","import React, { Component } from 'react'\nimport Router from './Router'\n\nimport './App.scss'\n\nclass AppLayout extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Router />\n      </div>\n    )\n  }\n}\n\nexport default AppLayout\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function unregisterregister() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Router is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport AppLayout from './AppLayout'\nimport unregister from './registerServiceWorker'\n\nimport './index.scss'\n\nReactDOM.render(<AppLayout />, document.getElementById('root'));\nunregister();\n"],"sourceRoot":""}